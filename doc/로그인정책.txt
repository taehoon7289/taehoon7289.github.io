로그인 조건
1. 서버와 클라이언트 계속 연결 하고 있지 않음.
-> 토큰 사용 필요.
refresh_token : access_token 발급시 필요, id를 통한 로그인시에만 발급 (만료시간 없음), uuid 36문자열 형태
access_token : api 통신시 인증 체크시 필요, refresh_token 으로만 발급 (만료시간 10분), jwt 형태

2. 중복로그인 제한 필요
-> 현재 이용자 토큰을 서버에서 관리할 필요있음.
-> 기존 이용자 토큰 삭제 -> 새로운 유저의 토큰을 저장 (refresh_token)
-> refresh_token 변경하여 재로그인필요하도록 해야함.

3. 유저상태변경에 따라 바로 접속 차단할 필요
-> 유저상태가 서비스 이용 못하는 상태일 경우 서버에서 관리하는 refresh_token 삭제 하여 재로그인 필요하도록 하고, 재로그인시 로그인 못하는 상태 체크

구현내용
redis: 사용자별 refresh_token 저장을 위해 사용

로그인시 (server)
1. sns 로그인 데이터로 access_key 를 받음.
- 회원상태 체크하여 로그인 여부 확인
2. access_key 로 refresh_token 생성
3. refresh_token 으로 access_token 생성
4. redis에 refresh_token, access_token 저장
5. response data로 refresh_token, access_token 전달

api 통신시 (server)
1. client 에서는 헤더에 Authorization: [access_token] 포함하여 call
2. server에서 token 체크
2.1 토큰 형태 체크
	- yes : 2.2 로 이동
	- no:  403 error response
2.2 만료시간 체크
	- yes: 2.3 로 이동
	- no: 401 error response
2.3 토큰에서  회원데이터 추출

2.4 redis 에 회원 id 로 조회
-> 데이터 있으면 access_token 체크하여 유효하면 controller, access_token이 다르거나 없으면 401 error
-> 데이터 없으면 재로그인 필요하므로 403 error

api 통신시 (client)
1. 401(권한없음) error 일때, uuid와 refresh_token 보내서 새로운 access_token 받아서 api 재호출
2. 403(금지됨) error 일때, 로그인 필요한 상태.


